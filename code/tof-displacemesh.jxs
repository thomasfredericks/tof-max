<jittershader name="shady.jxs">
	<description>transform matrices</description>
	<param name="amount" type="vec3" default="0. 0. 0."/>
	<param name="scale" type="vec3" default="1. 1. 1."/>
	<param name="tex0" type="int" default="0" />
	<param name="tex1" type="int" default="1" />
	<language name="glsl" version="1.2">
	<bind param="amount" program="vp" />
	<bind param="scale" program="vp" />
	<bind param="tex0" program="vp" />
	<bind param="tex1" program="vp" />
	<program name="vp" type="vertex">
<![CDATA[

#version 120
uniform vec3 scale;
uniform vec3 amount;
uniform sampler2DRect  tex0;
uniform sampler2DRect  tex1;
varying vec2 texcoord0;
varying vec2 texcoord1;


void main(void)
{
	texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);

	vec4 noise = texture2DRect(tex0, texcoord0.xy);
	
	vec4 normal = vec4(gl_NormalMatrix * gl_Normal, 1.);
	
	
	texcoord1 = vec2(gl_TextureMatrix[1] * gl_MultiTexCoord1);
	
	vec4 color = texture2DRect(tex1, texcoord1.xy);
	//vec4 normal = vec4(gl_Normal, 1.);

	vec4 v = vec4(gl_Vertex);

v.z *= scale.z;
v.y *= scale.y ;
v.x *= scale.x;

	v.z += ((noise.x) * (amount.z) * gl_Normal.z);
	v.y += ((noise.x) * (amount.y)  * gl_Normal.y);
	v.x += ((noise.x) * (amount.x)  * gl_Normal.x);
/*
	v.z += ((noise.x*2.0-1.0) * (amount.z) * gl_Normal.z);
	v.y += ((noise.x*2.0-1.0) * (amount.y)  * gl_Normal.y);
	v.x += ((noise.x*2.0-1.0) * (amount.x)  * gl_Normal.x);
*/
	vec4 pos = gl_ModelViewMatrix * v;

	//gl_Position = gl_ProjectionMatrix * (pos + normalize(normal));
	gl_Position = gl_ModelViewProjectionMatrix * v;

		
gl_FrontColor = color * gl_Color;
	

}

]]>
</program>
<program name="fp" type="fragment">
<![CDATA[

#version 120

varying vec2 texcoord0;

void main (void)
{
	gl_FragColor = gl_Color;
}

]]>
		</program>
	</language>
</jittershader>
